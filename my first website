<!DOCTYPE html>
<html>
<head>
<style>
    body {
        background-color: linear-gradient(135deg, #FDFDFD, #EFEFEF); /* Background gradient similar to Instagram */
        color: #000; /* Text color (black) */
        font-family: Arial, sans-serif;
        margin: 0; /* Remove default margin */
    }

    header {
        background-color: #FF5733; /* Unique header color (e.g., orange) */
        padding: 20px;
        text-align: center;
    }

    h1 {
        font-size: 36px;
    }

    article {
        background-color: #FFFFFF;
        padding: 20px;
        margin: 20px;
    }

    .blog-post {
        margin: 20px 0;
    }

    .post-actions {
        margin-top: 10px;
    }

    button {
        background-color: #FF0000; /* Red button background */
        color: #FFFFFF; /* White button text */
        padding: 5px 10px;
        border: none;
        cursor: pointer;
        margin-right: 10px;
    }

    button.share-button {
        background-color: #FF3333; /* Light red share button */
    }

    button.comment-button {
        background-color: #FF3333; /* Light red comment button */
    }
</style>

    <meta charset="UTF-8">
    <title>Uknowlegit</title>
    <template id="blog-post-template">
    <article class="blog-post" style="background: linear-gradient(135deg, #F8F8F8, #E6E6E6);">
        <h2>Blog Post Title</h2>
        <p>Here is the content of your blog post.</p>
        <div class="post-actions">
            <button class="like-button">Like</button>
            <button class="share-button">Share</button>
            <button class="comment-button">Comment</button>
        </div>
    </article>
</template>
</head>
<body>
    <header>
        <h1>Uknowlegit</h1>
    </header>
        <template id="About taiwo">
    <article class="blog-post" style="background: linear-gradient(135deg, #F8F8F8, #E6E6E6);">
        <h2>Blog Post Title</h2>
        <p>taiwo she so beautiful.</p>
        <div class="post-actions">
            <button class="like-button">Like</button>
            <button class="share-button">Share</button>
            <button class="comment-button">Comment</button>
        </div>
    </article>
</template>
    <div id="blog-posts">
        Ronaldo jr 
    </div>
// Define a Mongoose schema for blog posts
const postSchema = new mongoose.Schema({
  title: String,
  content: String,
  likes: Number,
  comments: [{ text: String }],
});

// Create a Mongoose model for the blog post
const Post = mongoose.model('Post', postSchema);

// API route to create a new blog post
app.post('/api/posts', async (req, res) => {
  const { title, content } = req.body;
  
  if (!title || !content) {
    return res.status(400).json({ error: 'Title and content are required' });
  }

  const post = new Post({ title, content, likes: 0, comments: [] });

  try {
    await post.save();
    res.status(201).json(post);
  } catch (err) {
    res.status(500).json({ error: 'Error creating the post' });
  }
});

// API route to like a blog post
app.post('/api/posts/:id/like', async (req, res) => {
  const postId = req.params.id;

  try {
    const post = await Post.findById(postId);
    if (!post) {
      return res.status(404).json({ error: 'Post not found' });
    }

    post.likes += 1;
    await post.save();

    res.status(200).json(post);
  } catch (err) {
    res.status(500).json({ error: 'Error liking the post' });
  }
});

// API route to add a comment to a blog post
app.post('/api/posts/:id/comment', async (req, res) => {
  const postId = req.params.id;
  const { comment } = req.body;

  if (!comment) {
    return res.status(400).json({ error: 'Comment text is required' });
  }

  try {
    const post = await Post.findById(postId);
    if (!post) {
      return res.status(404).json({ error: 'Post not found' });
    }

    post.comments.push({ text: comment });
    await post.save();

    res.status(200).json(post);
  } catch (err) {
    res.status(500).json({ error: 'Error adding the comment' });
  }
});
const express = require('express');
const passport = require('passport');
const LocalStrategy = require('passport-local').Strategy;
const expressSession = require('express-session');
const app = express();

// Configure the session
app.use(expressSession({ secret: 'your-secret-key', resave: false, saveUninitialized: false }));

// Initialize Passport and the session
app.use(passport.initialize());
app.use(passport.session());
const users = [
    { id: 1, username: 'user1', password: 'password1' },
    { id: 2, username: 'user2', password: 'password2' },
];
passport.use(new LocalStrategy(
    (username, password, done) => {
        const user = users.find(u => u.username === username);

        if (!user) {
            return done(null, false, { message: 'Incorrect username.' });
        }

        if (user.password !== password) {
            return done(null, false, { message: 'Incorrect password.' });
        }

        return done(null, user);
    }
));

passport.serializeUser((user, done) => {
    done(null, user.id);
});

passport.deserializeUser((id, done) => {
    const user = users.find(u => u.id === id);
    done(null, user);
});
app.post('/login', passport.authenticate('local', {
    successRedirect: '/dashboard',
    failureRedirect: '/login',
    failureFlash: true
}));

app.get('/login', (req, res) => {
    res.send('Login page');
});

app.get('/dashboard', (req, res) => {
    if (req.isAuthenticated()) {
        res.send(`Welcome, ${req.user.username}!`);
    } else {
        res.redirect('/login');
    }
});

app.get('/logout', (req, res) => {
    req.logout();
    res.redirect('/');
});
app.listen(3000, () => {
    console.log('Server is running on port 3000');
});

</body>
</html>
